using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.IO;
using System.Linq;


[Authorize] // Requires authentication for all actions except where overridden
public class StudentsController : Controller
{
    private readonly ApplicationDbContext _context;
    private readonly UserManager<IdentityUser> _userManager;
    private readonly IWebHostEnvironment _webHostEnvironment;


    public StudentsController(
        ApplicationDbContext context,
        UserManager<IdentityUser> userManager,
        IWebHostEnvironment webHostEnvironment)
    {
        _context = context ?? throw new ArgumentNullException(nameof(context));
        _userManager = userManager ?? throw new ArgumentNullException(nameof(userManager));
        _webHostEnvironment = webHostEnvironment ?? throw new ArgumentNullException(nameof(webHostEnvironment));
    }

    // GET: Students/Search
    [AllowAnonymous] // Allow unauthenticated users to search
    public async Task<IActionResult> Index(string searchString)
    {
        try
        {
            var students = from s in _context.Students
                           select s;

            if (!string.IsNullOrEmpty(searchString))
            {
                students = students.Where(s => s.FirstName.Contains(searchString)
                    || s.LastName.Contains(searchString)
                    || s.StudentId.Contains(searchString));
            }

            return View(await students.ToListAsync());
        }
        catch (Exception ex)
        {
            // Log the exception (you might want to use ILogger here)
            return StatusCode(500, $"An error occurred while searching students: {ex.Message}");
        }
    }

    // GET: Students/Create
    public IActionResult Create()
    {
        return View();
    }

    // POST: Students/Create
    [HttpPost]
    [ValidateAntiForgeryToken]
    public async Task<IActionResult> Create(
        [Bind("FirstName,LastName,Email,DateOfBirth,StudentId,Department")] Student student,
        IFormFile photo)
    {
        try
        {
            if (ModelState.IsValid)
            {
                if (photo != null && photo.Length > 0)
                {
                    string uploadsFolder = Path.Combine(_webHostEnvironment.WebRootPath, "uploads");
                    string uniqueFileName = Guid.NewGuid().ToString() + "_" + photo.FileName;
                    string filePath = Path.Combine(uploadsFolder, uniqueFileName);

                    // Ensure directory exists
                    Directory.CreateDirectory(uploadsFolder);

                    using (var fileStream = new FileStream(filePath, FileMode.Create))
                    {
                        await photo.CopyToAsync(fileStream);
                    }
                    student.PhotoPath = "/uploads/" + uniqueFileName;
                }

                student.UserId = _userManager.GetUserId(User);
                if (student.UserId == null)
                {
                    return Unauthorized("User must be logged in to create a student record.");
                }

                _context.Add(student);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Success));
            }
            return View(student);
        }
        catch (Exception ex)
        {
            // Log the exception
            ModelState.AddModelError("", $"An error occurred while saving the student: {ex.Message}");
            return View(student);
        }
    }

    public IActionResult Success()
    {
        return View();
    }
}